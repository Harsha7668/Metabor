import os

async def convert_video(video_file, output_file, bot, msg, sts):
    progress_file = 'progress.txt'
    
    # Create an empty progress file
    with open(progress_file, 'w') as f:
        pass
    
    command = (
        f"ffmpeg -hide_banner -loglevel quiet -progress {progress_file} -i {video_file} "
        f"-vf drawtext=fontfile=font.ttf:fontsize=27:fontcolor=white:bordercolor=black@0.50:x=w-tw-10:y=10:box=1:boxcolor=black@0.5:boxborderw=6:text='@Anime_Sensei' "
        f"-c:v libx264 -crf 28 -pix_fmt yuv420p -s 854x480 -b:v 150k -c:a libopus -b:a 35k -preset veryfast {output_file} -y"
    )

    process = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    COMPRESSION_START_TIME = time.time()
    while process.returncode is None:
        await asyncio.sleep(3)
        if os.path.exists(progress_file):
            with open(progress_file, 'r') as file:
                text = file.read()
                frame = re.findall("frame=(\d+)", text)
                time_in_us = re.findall("out_time_ms=(\d+)", text)
                progress = re.findall("progress=(\w+)", text)
                speed = re.findall("speed=(\d+\.?\d*)", text)
                if frame:
                    frame = int(frame[-1])
                else:
                    frame = 1
                if speed:
                    speed = speed[-1]
                else:
                    speed = 1
                if time_in_us:
                    time_in_us = time_in_us[-1]
                else:
                    time_in_us = 1
                if progress and progress[-1] == "end":
                    break

                elapsed_time = int(time_in_us) / 1000000
                execution_time = int((time.time() - COMPRESSION_START_TIME) * 1000)
                difference = math.floor((elapsed_time / float(speed)))
                ETA = "-" if difference <= 0 else TimeFormatter(difference * 1000)
                percentage = math.floor(elapsed_time * 100 / execution_time)
                progress_str = f"ðŸ“ˆ <b>Progress:</b> {round(percentage, 2)}%\n" \
                               f"[{'â–ˆ' * math.floor(percentage / 10)}{'.' * (10 - math.floor(percentage / 10))}]"
                stats = f'ðŸ—³ <b>ENCODING IN PROGRESS</b>\n\n' \
                        f'âŒš <b>TIME LEFT:</b> {ETA}\n\n' \
                        f'{progress_str}\n'

                try:
                    await msg.edit_text(stats)
                except:
                    pass
        else:
            # Handle case where progress.txt is missing
            await msg.edit_text("Error: Progress file missing. Please try again.")
            return

    stdout, stderr = await process.communicate()
    e_response = stderr.decode().strip()
    if process.returncode != 0:
        await msg.edit_text(f"**ERROR:** {e_response}\n\nContact @sunrises_24")
        os.remove(video_file)
        os.remove(output_file)
        return None

    if os.path.exists(output_file):
        # Send the progress file if needed (for debugging or other purposes)
        if os.path.exists(progress_file):
            try:
                await bot.send_document(msg.chat.id, document=progress_file, caption="FFmpeg Progress Log")
            except Exception as e:
                await msg.edit_text(f"Error sending progress file: {e}")
        return output_file
    else:
        return None
